import { BaseController } from '../common/base.controller';import { NextFunction, Request, Response } from 'express';import { HTTPError } from '../errors/http-error.class';import { inject, injectable } from 'inversify';import { TYPES } from '../types';import { LoggerInterface } from '../logger/logger.interface';import 'reflect-metadata';import { UsersInterface } from './users.interface';import { UserLoginDto } from './dto/user-login.dto';import { UserRegistrationDto } from './dto/user-registration.dto';import { UsersService } from './users.service';@injectable()export class UsersController extends BaseController implements UsersInterface {	constructor(		@inject(TYPES.LoggerInterface) private loggerService: LoggerInterface,		@inject(TYPES.UserService) private usersService: UsersService,	) {		super(loggerService);		this.bindRoutes([			{ path: '/registration', method: 'post', func: this.registration },			{ path: '/login', method: 'post', func: this.login },		]);	}	async login(		_request: Request<{}, {}, UserLoginDto>,		_response: Response,		next: NextFunction,	): Promise<void> {		console.log(_request.body);		next(new HTTPError(401, ' Authorization Failed', 'Login'));	}	async registration(		{ body }: Request<{}, {}, UserRegistrationDto>,		response: Response,		next: NextFunction,	): Promise<void> {		const result = await this.usersService.createUser(body);		if (!result) {			return next(new HTTPError(422, 'User already exists', 'duplicate'));		}		this.ok(response, result);		next();	}}