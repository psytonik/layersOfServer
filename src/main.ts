import { App } from './app';import { LoggerService } from './logger/logger.service';import { UsersController } from './users/users.controller';import { UsersService } from './users/users.service';import { ExceptionFilter } from './errors/exception.filter';import { Container, ContainerModule, interfaces } from 'inversify';import { LoggerInterface } from './logger/logger.interface';import { TYPES } from './types';import { ExceptionFilterInterface } from './errors/exception.filter.interface';import { UsersServiceInterface } from './users/users.service.interface';import { ConfigService } from './config/config.service';import { ConfigServiceInterface } from './config/config.service.interface';import { PrismaService } from './database/prisma.service';import { UsersRepository } from './users/users.repository';import { UsersRepositoryInterface } from './users/users.repository.interface';export const appBindings = new ContainerModule((bind: interfaces.Bind) => {	bind<LoggerInterface>(TYPES.LoggerInterface).to(LoggerService).inSingletonScope();	bind<ExceptionFilterInterface>(TYPES.ExceptionFilter).to(ExceptionFilter);	bind<UsersController>(TYPES.UsersController).to(UsersController);	bind<UsersServiceInterface>(TYPES.UsersService).to(UsersService);	bind<ConfigServiceInterface>(TYPES.ConfigService).to(ConfigService).inSingletonScope();	bind<PrismaService>(TYPES.PrismaService).to(PrismaService).inSingletonScope();	bind<UsersRepositoryInterface>(TYPES.UsersRepository).to(UsersRepository).inSingletonScope();	bind<App>(TYPES.Application).to(App);});export interface BootstrapInterface {	appContainer: Container;	app: App;}const bootstrap = async (): Promise<BootstrapInterface> => {	const appContainer = new Container();	appContainer.load(appBindings);	const app = appContainer.get<App>(TYPES.Application);	await app.init();	return { appContainer, app };};export const boot: Promise<BootstrapInterface> = bootstrap();