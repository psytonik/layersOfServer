import { App } from './app';import { LoggerService } from './logger/logger.service';import { UsersController } from './users/users.controller';import { UsersService } from './users/users.service';import { ExceptionFilter } from './errors/exception.filter';import { Container, ContainerModule, interfaces } from 'inversify';import { LoggerInterface } from './logger/logger.interface';import { TYPES } from './types';import { ExceptionFilterInterface } from './errors/exception.filter.interface';import { UserServiceInterface } from './users/user.service.interface';export const appBindings = new ContainerModule((bind: interfaces.Bind) => {	bind<LoggerInterface>(TYPES.LoggerInterface).to(LoggerService);	bind<ExceptionFilterInterface>(TYPES.ExceptionFilter).to(ExceptionFilter);	bind<UsersController>(TYPES.UsersController).to(UsersController);	bind<UserServiceInterface>(TYPES.UserService).to(UsersService);	bind<App>(TYPES.Application).to(App);});export interface BootstrapInterface {	appContainer: Container;	app: App;}const bootstrap = (): BootstrapInterface => {	const appContainer = new Container();	appContainer.load(appBindings);	const app = appContainer.get<App>(TYPES.Application);	app.init().then((r) => r);	return { appContainer, app };};export const { appContainer, app } = bootstrap();