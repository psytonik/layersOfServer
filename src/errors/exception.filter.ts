import { NextFunction, Request, Response } from 'express';import { ExceptionFilterInterface } from './exception.filter.interface';import { HTTPError } from './http-error.class';import { inject, injectable } from 'inversify';import { LoggerInterface } from '../logger/logger.interface';import { TYPES } from '../types';import 'reflect-metadata';@injectable()export class ExceptionFilter implements ExceptionFilterInterface {	constructor(@inject(TYPES.LoggerInterface) private logger: LoggerInterface) {}	catch(err: Error | HTTPError, req: Request, res: Response, next: NextFunction): void {		if (err instanceof HTTPError) {			this.logger.error(`[${err.context}] Error: ${err.statusCode}: ${err.message}`);			res.status(err.statusCode).send({ error: err.message });		} else {			this.logger.error(`${err.message}`);			res.status(500).send({ error: err.message });		}	}}